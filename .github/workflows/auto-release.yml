name: Auto Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    name: Check for Version Change
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.version-check.outputs.should_release }}
      new_version: ${{ steps.version-check.outputs.new_version }}
      version_changed: ${{ steps.version-check.outputs.version_changed }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: version-check
        run: |
          # Extract current version from version.go
          CURRENT_VERSION=$(grep -o 'Version:[[:space:]]*"[^"]*"' internal/commands/version.go | sed 's/Version:[[:space:]]*"\(.*\)"/\1/')
          echo "Current version in code: $CURRENT_VERSION"
          
          # Get latest git tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest git tag: $LATEST_TAG"
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$LATEST_TAG" ]; then
            echo "Version changed from $LATEST_TAG to $CURRENT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No version change detected"
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Run tests
        run: |
          go mod tidy
          go test -v ./...

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          echo "Creating tag: $VERSION"
          
          # Create annotated tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          
          # Push tag
          git push origin "$VERSION"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Summary
        run: |
          echo "ðŸš€ Released version ${{ needs.check-version.outputs.new_version }}"
          echo "ðŸ“¦ Binaries and Homebrew formula updated"
          echo "ðŸ”— Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check-version.outputs.new_version }}"